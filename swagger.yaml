openapi: 3.0.3
info:
  title: REST API Boilerplate
  description: API for user management, authentication, feedback, and file uploads.
  version: 1.0.0
servers:
  - url: http://localhost:3000

paths:
  /signUp:
    post:
      summary: Register or reactivate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered or reactivated
        '409':
          description: Email already in use

  /verifyEmail:
    get:
      summary: Verify user email using token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified
        '401':
          description: Token expired
        '500':
          description: Verification error

  /login:
    post:
      summary: Log in user and return JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '400':
          description: Login failed

  /forgotPassword:
    post:
      summary: Send password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Email sent
        '400':
          description: User not found

  /resetPassword:
    post:
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                token:
                  type: string
      responses:
        '200':
          description: Password reset successful
        '401':
          description: Token expired

  /user/me:
    get:
      summary: Get authenticated user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile

  /user:
    get:
      summary: Get users (admin only)
      parameters:
        - in: query
          name: active
          schema:
            type: string
        - in: query
          name: role
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: skip
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
    patch:
      summary: Update authenticated user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                phone:
                  type: string
                profileURL:
                  type: string
                timezone:
                  type: string
      responses:
        '200':
          description: Updated user
        '400':
          description: No fields provided or invalid fields
        '405':
          description: Operation not allowed
        '404':
          description: User not found
    delete:
      summary: Soft delete user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found

  /logout:
    post:
      summary: Logout from current session
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logged out

  /logoutAll:
    post:
      summary: Logout from all sessions
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logged out from all sessions

  /user/me:
    patch:
      summary: Update authenticated user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated user

    delete:
      summary: Soft delete user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted

  /user/me/feedback:
    get:
      summary: Get all feedback for user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of feedbacks

  /feedback:
    post:
      summary: Submit feedback
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
      responses:
        '201':
          description: Feedback submitted

    get:
      summary: Get feedback list
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: skip
          schema:
            type: integer
      responses:
        '200':
          description: Feedback list

  /feedback/{id}:
    get:
      summary: Get single feedback by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Feedback object

    patch:
      summary: Update feedback by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Feedback updated

    delete:
      summary: Delete feedback by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Feedback deleted

  /upload:
    post:
      summary: Upload file to Cloudinary
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
